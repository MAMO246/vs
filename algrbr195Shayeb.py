#TeleGram: @ADIL721
import base64
exec(base64.b64decode('IyEvdXNyL2Jpbi9lbnYgcHl0aG9uMwojIENvcHlyaWdodCAoQykgQHN1YmlucHMKIyBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeQojIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieQojIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yCiMgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiMgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCiMgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2YKIyBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiMgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgojIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZQojIGFsb25nIHdpdGggdGhpcyBwcm9ncmFtLiAgSWYgbm90LCBzZWUgPGh0dHBzOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KZnJvbSB1dGlscyBpbXBvcnQgTE9HR0VSCnRyeToKICAgaW1wb3J0IG9zCiAgIGltcG9ydCBoZXJva3UzCiAgIGZyb20gZG90ZW52IGltcG9ydCBsb2FkX2RvdGVudgogICBmcm9tIGFzdCBpbXBvcnQgbGl0ZXJhbF9ldmFsIGFzIGlzX2VuYWJsZWQKCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOgogICAgaW1wb3J0IG9zCiAgICBpbXBvcnQgc3lzCiAgICBpbXBvcnQgc3VicHJvY2VzcwogICAgZmlsZT1vcy5wYXRoLmFic3BhdGgoInJlcXVpcmVtZW50cy50eHQiKQogICAgc3VicHJvY2Vzcy5jaGVja19jYWxsKFtzeXMuZXhlY3V0YWJsZSwgJy1tJywgJ3BpcCcsICdpbnN0YWxsJywgJy1yJywgZmlsZSwgJy0tdXBncmFkZSddKQogICAgb3MuZXhlY2woc3lzLmV4ZWN1dGFibGUsIHN5cy5leGVjdXRhYmxlLCAqc3lzLmFyZ3YpCgoKY2xhc3MgQ29uZmlnOgogICAgI1RlbGVncmFtIEFQSSBTdHVmZnMKICAgIGxvYWRfZG90ZW52KCkgICMgbG9hZCBlbnZpcm9tZW50IHZhcmlhYmxlcyBmcm9tIC5lbnYgZmlsZQogICAgQURNSU4gPSBvcy5lbnZpcm9uLmdldCgiQURNSU5TIiwgJycpCiAgICBTVURPID0gW2ludChhZG1pbikgZm9yIGFkbWluIGluIChBRE1JTikuc3BsaXQoKV0gIyBFeGNsdXNpdmUgZm9yIGhlcm9rdSB2YXJzIGNvbmZpZ3VyYXRpb24uCiAgICBBRE1JTlMgPSBbaW50KGFkbWluKSBmb3IgYWRtaW4gaW4gKEFETUlOKS5zcGxpdCgpXSAjZ3JvdXAgYWRtaW5zIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhpcyBsaXN0LgogICAgQVBJX0lEID0gaW50KG9zLmVudmlyb24uZ2V0KCJBUElfSUQiLCAnJykpCiAgICBBUElfSEFTSCA9IG9zLmVudmlyb24uZ2V0KCJBUElfSEFTSCIsICIiKQogICAgQk9UX1RPS0VOID0gb3MuZW52aXJvbi5nZXQoIkJPVF9UT0tFTiIsICIiKSAgICAgCiAgICBTRVNTSU9OID0gb3MuZW52aXJvbi5nZXQoIlNFU1NJT05fU1RSSU5HIiwgIiIpCgogICAgI1N0cmVhbSBDaGF0IGFuZCBMb2cgR3JvdXAKICAgIENIQVQgPSBpbnQob3MuZW52aXJvbi5nZXQoIkNIQVQiLCAiIikpCiAgICBMT0dfR1JPVVA9b3MuZW52aXJvbi5nZXQoIkxPR19HUk9VUCIsICIiKQoKICAgICNTdHJlYW0gCiAgICBTVFJFQU1fVVJMPW9zLmVudmlyb24uZ2V0KCJTVEFSVFVQX1NUUkVBTSIsICJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PU02ejBRcWw0LXFvIikKICAgCiAgICAjRGF0YWJhc2UKICAgIERBVEFCQVNFX1VSST1vcy5lbnZpcm9uLmdldCgiREFUQUJBU0VfVVJJIiwgTm9uZSkKICAgIERBVEFCQVNFX05BTUU9b3MuZW52aXJvbi5nZXQoIkRBVEFCQVNFX05BTUUiLCAiVkNQbGF5ZXJCb3QiKQoKCiAgICAjaGVyb2t1CiAgICBBUElfS0VZPW9zLmVudmlyb24uZ2V0KCJIRVJPS1VfQVBJX0tFWSIsIE5vbmUpCiAgICBBUFBfTkFNRT1vcy5lbnZpcm9uLmdldCgiSEVST0tVX0FQUF9OQU1FIiwgTm9uZSkKCgogICAgI09wdGlvbmFsIENvbmZpZ3VyYXRpb24KICAgIFNIVUZGTEU9aXNfZW5hYmxlZChvcy5lbnZpcm9uLmdldCgiU0hVRkZMRSIsICdUcnVlJykpCiAgICBBRE1JTl9PTkxZPWlzX2VuYWJsZWQob3MuZW52aXJvbi5nZXQoIkFETUlOX09OTFkiLCAiRmFsc2UiKSkKICAgIFJFUExZX01FU1NBR0U9b3MuZW52aXJvbi5nZXQoIlJFUExZX01FU1NBR0UiLCBGYWxzZSkKICAgIEVESVRfVElUTEUgPSBvcy5lbnZpcm9uLmdldCgiRURJVF9USVRMRSIsIFRydWUpCiAgICAjb3RoZXJzCiAgICAKICAgIFJFQ09SRElOR19EVU1QPW9zLmVudmlyb24uZ2V0KCJSRUNPUkRJTkdfRFVNUCIsIEZhbHNlKQogICAgUkVDT1JESU5HX1RJVExFPW9zLmVudmlyb24uZ2V0KCJSRUNPUkRJTkdfVElUTEUiLCBGYWxzZSkKICAgIFRJTUVfWk9ORSA9IG9zLmVudmlyb24uZ2V0KCJUSU1FX1pPTkUiLCAiQXNpYS9Lb2xrYXRhIikgICAgCiAgICBJU19WSURFTz1pc19lbmFibGVkKG9zLmVudmlyb24uZ2V0KCJJU19WSURFTyIsICdUcnVlJykpCiAgICBJU19MT09QPWlzX2VuYWJsZWQob3MuZW52aXJvbi5nZXQoIklTX0xPT1AiLCAnVHJ1ZScpKQogICAgREVMQVk9aW50KG9zLmVudmlyb24uZ2V0KCJERUxBWSIsICcxMCcpKQogICAgUE9SVFJBSVQ9aXNfZW5hYmxlZChvcy5lbnZpcm9uLmdldCgiUE9SVFJBSVQiLCAnRmFsc2UnKSkKICAgIElTX1ZJREVPX1JFQ09SRD1pc19lbmFibGVkKG9zLmVudmlyb24uZ2V0KCJJU19WSURFT19SRUNPUkQiLCAnVHJ1ZScpKQogICAgREVCVUc9aXNfZW5hYmxlZChvcy5lbnZpcm9uLmdldCgiREVCVUciLCAnRmFsc2UnKSkKICAgIFBUTj1pc19lbmFibGVkKG9zLmVudmlyb24uZ2V0KCJQVE4iLCAiRmFsc2UiKSkKCiAgICAjUXVhbGl0eSB2YXJzCiAgICBFX0JJVFJBVEU9b3MuZW52aXJvbi5nZXQoIkJJVFJBVEUiLCBGYWxzZSkKICAgIEVfRlBTPW9zLmVudmlyb24uZ2V0KCJGUFMiLCBGYWxzZSkKICAgIENVU1RPTV9RVUFMSVRZPW9zLmVudmlyb24uZ2V0KCJRVUFMSVRZIiwgIjEwMCIpCgogICAgI1NlYXJjaCBmaWx0ZXJzIGZvciBjcGxheQogICAgRklMVEVSUyA9ICBbZmlsdGVyLmxvd2VyKCkgZm9yIGZpbHRlciBpbiAob3MuZW52aXJvbi5nZXQoIkZJTFRFUlMiLCAidmlkZW8gZG9jdW1lbnQiKSkuc3BsaXQoIiAiKV0KCgogICAgI0RvbnQgdG91Y2ggdGhlc2UsIHRoZXNlIGFyZSBub3QgZm9yIGNvbmZpZ3VyaW5nIHBsYXllcgogICAgR0VUX0ZJTEU9e30KICAgIERBVEE9e30KICAgIFNUUkVBTV9FTkQ9e30KICAgIFNDSEVEVUxFRF9TVFJFQU09e30KICAgIERVUj17fQogICAgbXNnID0ge30KCiAgICBTQ0hFRFVMRV9MSVNUPVtdCiAgICBwbGF5bGlzdD1bXQogICAgQ09ORklHX0xJU1QgPSBbIkFETUlOUyIsICJJU19WSURFTyIsICJJU19MT09QIiwgIlJFUExZX1BNIiwgIkFETUlOX09OTFkiLCAiU0hVRkZMRSIsICJFRElUX1RJVExFIiwgIkNIQVQiLCAKICAgICJTVURPIiwgIlJFUExZX01FU1NBR0UiLCAiU1RSRUFNX1VSTCIsICJERUxBWSIsICJMT0dfR1JPVVAiLCAiU0NIRURVTEVEX1NUUkVBTSIsICJTQ0hFRFVMRV9MSVNUIiwgCiAgICAiSVNfVklERU9fUkVDT1JEIiwgIklTX1JFQ09SRElORyIsICJXQVNfUkVDT1JESU5HIiwgIlJFQ09SRElOR19USVRMRSIsICJQT1JUUkFJVCIsICJSRUNPUkRJTkdfRFVNUCIsICJIQVNfU0NIRURVTEUiLCAKICAgICJDVVNUT01fUVVBTElUWSJdCgogICAgU1RBUlRVUF9FUlJPUj1Ob25lCgogICAgQURNSU5fQ0FDSEU9RmFsc2UKICAgIENBTExfU1RBVFVTPUZhbHNlCiAgICBZUExBWT1GYWxzZQogICAgWVNUUkVBTT1GYWxzZQogICAgQ1BMQVk9RmFsc2UKICAgIFNUUkVBTV9TRVRVUD1GYWxzZQogICAgTElTVEVOPUZhbHNlCiAgICBTVFJFQU1fTElOSz1GYWxzZQogICAgSVNfUkVDT1JESU5HPUZhbHNlCiAgICBXQVNfUkVDT1JESU5HPUZhbHNlCiAgICBQQVVTRT1GYWxzZQogICAgTVVURUQ9RmFsc2UKICAgIEhBU19TQ0hFRFVMRT1Ob25lCiAgICBJU19BQ1RJVkU9Tm9uZQogICAgVk9MVU1FPTEwMAogICAgQ1VSUkVOVF9DQUxMPU5vbmUKICAgIEJPVF9VU0VSTkFNRT1Ob25lCiAgICBVU0VSX0lEPU5vbmUKCiAgICBpZiBMT0dfR1JPVVA6CiAgICAgICAgTE9HX0dST1VQPWludChMT0dfR1JPVVApCiAgICBlbHNlOgogICAgICAgIExPR19HUk9VUD1Ob25lCiAgICBpZiBub3QgQVBJX0tFWSBvciBcCiAgICAgICBub3QgQVBQX05BTUU6CiAgICAgICBIRVJPS1VfQVBQPU5vbmUKICAgIGVsc2U6CiAgICAgICBIRVJPS1VfQVBQPWhlcm9rdTMuZnJvbV9rZXkoQVBJX0tFWSkuYXBwcygpW0FQUF9OQU1FXQoKCiAgICBpZiBFRElUX1RJVExFIGluIFsiTk8iLCAnRmFsc2UnXToKICAgICAgICBFRElUX1RJVExFPUZhbHNlCiAgICAgICAgTE9HR0VSLmluZm8oIlRpdGxlIEVkaXRpbmcgdHVybmVkIG9mZiIpCiAgICBpZiBSRVBMWV9NRVNTQUdFOgogICAgICAgIFJFUExZX01FU1NBR0U9UkVQTFlfTUVTU0FHRQogICAgICAgIFJFUExZX1BNPVRydWUKICAgICAgICBMT0dHRVIuaW5mbygiUmVwbHkgTWVzc2FnZSBGb3VuZCwgRW5hYmxlZCBQTSBNU0ciKQogICAgZWxzZToKICAgICAgICBSRVBMWV9NRVNTQUdFPUZhbHNlCiAgICAgICAgUkVQTFlfUE09RmFsc2UKCiAgICBpZiBFX0JJVFJBVEU6CiAgICAgICB0cnk6CiAgICAgICAgICBCSVRSQVRFPWludChFX0JJVFJBVEUpCiAgICAgICBleGNlcHQ6CiAgICAgICAgICBMT0dHRVIuZXJyb3IoIkludmFsaWQgYml0cmF0ZSBzcGVjaWZpZWQuIikKICAgICAgICAgIEVfQklUUkFURT1GYWxzZQogICAgICAgICAgQklUUkFURT00ODAwMAogICAgICAgaWYgbm90IEJJVFJBVEUgPj0gNDgwMDA6CiAgICAgICAgICBCSVRSQVRFPTQ4MDAwCiAgICBlbHNlOgogICAgICAgQklUUkFURT00ODAwMAogICAgCiAgICBpZiBFX0ZQUzoKICAgICAgIHRyeToKICAgICAgICAgIEZQUz1pbnQoRV9GUFMpCiAgICAgICBleGNlcHQ6CiAgICAgICAgICBMT0dHRVIuZXJyb3IoIkludmFsaWQgRlBTIHNwZWNpZmllZCIpCiAgICAgICAgICBFX0ZQUz1GYWxzZQogICAgICAgaWYgbm90IEZQUyA+PSAzMDoKICAgICAgICAgIEZQUz0zMAogICAgZWxzZToKICAgICAgIEZQUz0zMAogICAgdHJ5OgogICAgICAgQ1VTVE9NX1FVQUxJVFk9aW50KENVU1RPTV9RVUFMSVRZKQogICAgICAgaWYgQ1VTVE9NX1FVQUxJVFkgPiAxMDA6CiAgICAgICAgICBDVVNUT01fUVVBTElUWSA9IDEwMAogICAgICAgICAgTE9HR0VSLndhcm5pbmcoIm1heGltdW0gcXVhbGl0eSBhbGxvd2VkIGlzIDEwMCwgaW52YWxpZCBxdWFsaXR5IHNwZWNpZmllZC4gUXVhbGl0eSBzZXQgdG8gMTAwIikKICAgICAgIGVsaWYgQ1VTVE9NX1FVQUxJVFkgPCAxMDoKICAgICAgICAgIExPR0dFUi53YXJuaW5nKCJNaW5pbXVtIFF1YWxpdHkgYWxsb3dlZCBpcyAxMC4sIFF1bGFpdHkgc2V0IHRvIDEwIikKICAgICAgICAgIENVU1RPTV9RVUFMSVRZID0gMTAKICAgICAgIGlmICA2Ni45ICA8IENVU1RPTV9RVUFMSVRZIDwgMTAwOgogICAgICAgICAgaWYgbm90IEVfQklUUkFURToKICAgICAgICAgICAgIEJJVFJBVEU9NDgwMDAKICAgICAgIGVsaWYgNTAgPCBDVVNUT01fUVVBTElUWSA8IDY2Ljk6CiAgICAgICAgICBpZiBub3QgRV9CSVRSQVRFOgogICAgICAgICAgICAgQklUUkFURT0zNjAwMAogICAgICAgZWxzZToKICAgICAgICAgIGlmIG5vdCBFX0JJVFJBVEU6CiAgICAgICAgICAgICBCSVRSQVRFPTI0MDAwCiAgICBleGNlcHQ6CiAgICAgICBpZiBDVVNUT01fUVVBTElUWS5sb3dlcigpID09ICdoaWdoJzoKICAgICAgICAgIENVU1RPTV9RVUFMSVRZPTEwMAogICAgICAgZWxpZiBDVVNUT01fUVVBTElUWS5sb3dlcigpID09ICdtZWRpdW0nOgogICAgICAgICAgQ1VTVE9NX1FVQUxJVFk9NjYuOQogICAgICAgZWxpZiBDVVNUT01fUVVBTElUWS5sb3dlcigpID09ICdsb3cnOgogICAgICAgICAgQ1VTVE9NX1FVQUxJVFk9NTAKICAgICAgIGVsc2U6CiAgICAgICAgICBMT0dHRVIud2FybmluZygiSW52YWxpZCBRVUFMSVRZIHNwZWNpZmllZC5EZWZhdWx0aW5nIHRvIEhpZ2guIikKICAgICAgICAgIENVU1RPTV9RVUFMSVRZPTEwMAoKCgogICAgI2hlbHAgc3RyaW5ncyAKICAgIFBMQVlfSEVMUD0iIiIKX19Zb3UgY2FuIHBsYXkgdXNpbmcgYW55IG9mIHRoZXNlIG9wdGlvbnNfXwoKMS4gUGxheSBhIHZpZGVvIGZyb20gYSBZb3VUdWJlIGxpbmsuCkNvbW1hbmQ6ICoqL3BsYXkqKgpfX1lvdSBjYW4gdXNlIHRoaXMgYXMgYSByZXBseSB0byBhIFlvdVR1YmUgbGluayBvciBwYXNzIGxpbmsgYWxvbmcgY29tbWFuZC4gb3IgYXMgYSByZXBseSB0byBtZXNzYWdlIHRvIHNlYXJjaCB0aGF0IGluIFlvdVR1YmUuX18KCjIuIFBsYXkgZnJvbSBhIHRlbGVncmFtIGZpbGUuCkNvbW1hbmQ6ICoqL3BsYXkqKgpfX1JlcGx5IHRvIGEgc3VwcG9ydGVkIG1lZGlhKHZpZGVvIGFuZCBkb2N1bWVudHMgb3IgYXVkaW8gZmlsZSApLl9fCk5vdGU6IF9fRm9yIGJvdGggdGhlIGNhc2VzIC9mcGxheSBhbHNvIGNhbiBiZSB1c2VkIGJ5IGFkbWlucyB0byBwbGF5IHRoZSBzb25nIGltbWVkaWF0ZWx5IHdpdGhvdXQgd2FpdGluZyBmb3IgcXVldWUgdG8gZW5kLl9fCgozLiBQbGF5IGZyb20gYSBZb3VUdWJlIHBsYXlsaXN0CkNvbW1hbmQ6ICoqL3lwbGF5KioKX19GaXJzdCBnZXQgYSBwbGF5bGlzdCBmaWxlIGZyb20gQGlQdXJleCBvciBAaVB1cmV4IGFuZCByZXBseSB0byBwbGF5bGlzdCBmaWxlLl9fCgo0LiBMaXZlIFN0cmVhbQpDb21tYW5kOiAqKi9zdHJlYW0qKgpfX1Bhc3MgYSBsaXZlIHN0cmVhbSBVUkwgb3IgYW55IGRpcmVjdCBVUkwgdG8gcGxheSBpdCBhcyBzdHJlYW0uX18KCjUuIEltcG9ydCBhbiBvbGQgcGxheWxpc3QuCkNvbW1hbmQ6ICoqL2ltcG9ydCoqCl9fUmVwbHkgdG8gYSBwcmV2aW91c2x5IGV4cG9ydGVkIHBsYXlsaXN0IGZpbGUuIF9fCgo2LiBDaGFubmVsIFBsYXkKQ29tbWFuZDogKiovY3BsYXkqKgpfX1VzZSBgL2NwbGF5IGNoYW5uZWwgdXNlcm5hbWUgb3IgY2hhbm5lbCBpZGAgdG8gcGxheSBhbGwgdGhlIGZpbGVzIGZyb20gdGhlIGdpdmVuIGNoYW5uZWwuCkJ5IGRlZmF1bHQgYm90aCB2aWRlbyBmaWxlcyBhbmQgZG9jdW1lbnRzIHdpbGwgYmUgcGxheWVkIC4gWW91IGNhbiBhZGQgb3IgcmVtb3ZlIHRoZSBmaWxlIHR5cGUgdXNpbmcgYEZJTFRFUlNgIHZhci4gCkZvciBleGFtcGxlICwgdG8gc3RyZWFtIGF1ZGlvLCB2aWRlbyBhbmQgZG9jdW1lbnQgZnJvbSB0aGUgY2hhbm5lbCB1c2UgYC9lbnYgRklMVEVSUyB2aWRlbyBkb2N1bWVudCBhdWRpb2AgLiBJZiB5b3UgbmVlZCBvbmx5IGF1ZGlvICwgeW91IGNhbiB1c2UgYC9lbnYgRklMVEVSUyB2aWRlbyBhdWRpb2AgYW5kIHNvIG9uLgpUbyBzZXQgdXAgdGhlIGZpbGVzIGZyb20gYSBjaGFubmVsIGFzIFNUQVJUVVBfU1RSRUFNLCBzbyB0aGF0IHRoZSBmaWxlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgYWRkZWQgdG8gcGxheWxpc3Qgb24gc3RhcnR1cCBvZiBib3QuIHVzZSBgL2VudiBTVEFSVFVQX1NUUkVBTSBjaGFubmVsIHVzZXJuYW1lIG9yIGNoYW5uZWwgaWRgCgpOb3RlIHRoYXQgZm9yIHB1YmxpYyBjaGFubmVscyB5b3Ugc2hvdWxkIHVzZSB1c2VybmFtZSBvZiBjaGFubmVscyBhbG9uZyB3aXRoICdAJyBhbmQgZm9yIHByaXZhdGUgY2hhbm5lbHMgeW91IHNob3VsZCB1c2UgY2hhbm5lbCBpZC4KRm9yIHByaXZhdGUgY2hhbm5lbHMgLCBtYWtlIHN1cmUgYm90aCB0aGUgYm90IGFuZCBVU0VSIGFjY291bnQgaXMgYSBtZW1iZXIgb2YgY2hhbm5lbC5fXwoiIiIKICAgIFNFVFRJTkdTX0hFTFA9IiIiCioqWW91IGNhbiBlYXNpbHkgY3VzdG9taXplIHlvdSBwbGF5ZXIgYXMgcGVyIHlvdSBuZWVkcy4gVGhlIGZvbGxvd2luZyBjb25maWd1cmF0aW9ucyBhcmUgYXZhaWxhYmxlOioqCgrwn5S5Q29tbWFuZDogKiovc2V0dGluZ3MqKgoK8J+UuUFWQUlMQUJMRSBDT05GSUdVUkFUSU9OUzoKCioqUGxheWVyIE1vZGUqKiAtICBfX1RoaXMgYWxsb3dzIHlvdSB0byBydW4geW91ciBwbGF5ZXIgYXMgMjQvNyBtdXNpYyBwbGF5ZXIgb3Igb25seSB3aGVuIHRoZXJlIGlzIHNvbmcgaW4gcXVldWUuIApJZiBkaXNhYmxlZCwgcGxheWVyIHdpbGwgbGVhdmUgZnJvbSB0aGUgY2FsbCB3aGVuIHRoZSBwbGF5bGlzdCBpcyBlbXB0eS4KT3RoZXJ3aXNlIFNUQVJUVVBfU1RSRUFNIHdpbGwgYmUgc3RyZWFtZWQgd2hlbiBwbGF5bGlzdCBpZCBlbXB0eS5fXwoKKipWaWRlbyBFbmFibGVkKiogLSAgX19UaGlzIGFsbG93cyB5b3UgdG8gc3dpdGNoIGJldHdlZW4gYXVkaW8gYW5kIHZpZGVvLgppZiBkaXNhYmxlZCwgdmlkZW8gZmlsZXMgd2lsbCBiZSBwbGF5ZWQgYXMgYXVkaW8uX18KCioqQWRtaW4gT25seSoqIC0gX19FbmFibGluZyB0aGlzIHdpbGwgcmVzdHJpY3Qgbm9uLWFkbWluIHVzZXJzIGZyb20gdXNpbmcgcGxheSBjb21tYW5kLl9fCgoqKkVkaXQgVGl0bGUqKiAtIF9fRW5hYmxpbmcgdGhpcyB3aWxsIGVkaXQgeW91ciBWaWRlb0NoYXQgdGl0bGUgdG8gY3VycmVudCBwbGF5aW5nIHNvbmdzIG5hbWUuX18KCioqU2h1ZmZsZSBNb2RlKiogLSBfX0VuYWJsaW5nIHRoaXMgd2lsbCBzaHVmZmxlIHRoZSBwbGF5bGlzdCB3aGVuZXZlciB5b3UgaW1wb3J0IGEgcGxheWxpc3Qgb3IgdXNpbmcgL3lwbGF5IF9fCgoqKkF1dG8gUmVwbHkqKiAtIF9fQ2hvb3NlIHdoZXRoZXIgdG8gcmVwbHkgdGhlIFBNIG1lc3NhZ2VzIG9mIHBsYXlpbmcgdXNlciBhY2NvdW50LgpZb3UgY2FuICBzZXQgdXAgYSBjdXN0b20gcmVwbHkgbWVzc2FnZSB1c2luZyBgUkVQTFlfTUVTU0FHRWAgY29uZnVnLl9fCgoiIiIKICAgIFNDSEVEVUxFUl9IRUxQPSIiIgpfX1ZDUGxheWVyIGFsbG93cyB5b3UgdG8gc2NoZWR1bGUgYSBzdHJlYW0uIApUaGlzIG1lYW5zIHlvdSBjYW4gc2NoZWR1bGUgYSBzdHJlYW0gZm9yIGEgZnV0dXJlIGRhdGUgYW5kIG9uIHRoZSBzY2hlZHVsZWQgZGF0ZSwgc3RyZWFtIHdpbGwgYmUgcGxheWVkIGF1dG9tYXRpY2FsbHkuCkF0IHByZXNlbnQgeW91IGNhbiBzY2hlZHVsZSBhIHN0cmVhbSBmb3IgZXZlbiBvbmUgeWVhciEhLiBNYWtlIHN1cmUgeW91IGhhdmUgc2V0IHVwIGEgZGF0YWJzZSwgZWxzZSB5b3Ugd2lsbCBsb29zZSB5b3VyIHNjaGVkdWxlcyB3aGVuZXZlciB0aGUgcGxheWVyIHJlc3RhcnRzLiBfXwoKQ29tbWFuZDogKiovc2NoZWR1bGUqKgoKX19SZXBseSB0byBhIGZpbGUgb3IgYSB5b3V0dWJlIHZpZGVvIG9yIGV2ZW4gYSB0ZXh0IG1lc3NhZ2Ugd2l0aCBzY2hlZHVsZSBjb21tYW5kLgpUaGUgcmVwbGllZCBtZWRpYSBvciB5b3V0dWJlIHZpZGVvIHdpbGwgYmUgc2NoZWR1bGVkIGFuZCB3aWxsIGJlIHBsYXllZCBvbiB0aGUgc2NoZWR1bGVkIGRhdGUuClRoZSBzY2hlZHVsaW5nIHRpbWUgaXMgYnkgZGVmYXVsdCBpbiBJU1QgYW5kIHlvdSBjYW4gY2hhbmdlIHRoZSB0aW1lem9uZSB1c2luZyBgVElNRV9aT05FYCBjb25maWcuX18KCkNvbW1hbmQ6ICoqL3NsaXN0KioKX19WaWV3IHlvdXIgY3VycmVudCBzY2hlZHVsZWQgc3RyZWFtcy5fXwoKQ29tbWFuZDogKiovY2FuY2VsKioKX19DYW5jZWwgYSBzY2hlZHVsZSBieSBpdHMgc2NoZWR1bGUgaWQsIFlvdSBjYW4gZ2V0IHRoZSBzY2hlZHVsZSBpZCB1c2luZyAvc2xpc3QgY29tbWFuZF9fCgpDb21tYW5kOiAqKi9jYW5jZWxhbGwqKgpfX0NhbmNlbCBhbGwgdGhlIHNjaGVkdWxlZCBzdHJlYW1zX18KIiIiCiAgICBSRUNPUkRFUl9IRUxQPSIiIgpfX1dpdGggVkNQbGF5ZXIgeW91IGNhbiBlYXNpbHkgcmVjb3JkIGFsbCB5b3VyIHZpZGVvIGNoYXRzLgpCeSBkZWZhdWx0IHRlbGVncmFtIGFsbG93cyB5b3UgdG8gcmVjb3JkIGZvciBhIG1heGltdW0gZHVyYXRpb24gb2YgNCBob3Vycy4gCkFuIGF0dGVtcHQgdG8gb3ZlcmNvbWUgdGhpcyBsaW1pdCBoYXMgYmVlbiBtYWRlIGJ5IGF1dG9tYXRpY2FsbHkgcmVzdGFydGluZyB0aGUgcmVjb3JkaW5nIGFmdGVyICA0IGhvdXJzX18KCkNvbW1hbmQ6ICoqL3JlY29yZCoqCgpBVkFJTEFCTEUgQ09ORklHVVJBVElPTlM6CjEuIFJlY29yZCBWaWRlbzogX19JZiBlbmFibGVkIGJvdGggdGhlIHZpZGVvIGFuZCBhdWRpbyBvZiB0aGUgc3RyZWFtIHdpbGwgYmUgcmVjb3JkZWQsIG90aGVyd2lzZSBvbmx5IGF1ZGlvIHdpbGwgYmUgcmVjb3JkZWQuX18KCjIuIFZpZGVvIGRpbWVuc2lvbjogX19DaG9vc2UgYmV0d2VlbiBwb3J0cmFpdCBhbmQgbGFuZHNjYXBlIGRpbWVuc2lvbnMgZm9yIHlvdXIgcmVjb3JkaW5nX18KCjMuIEN1c3RvbSBSZWNvcmRpbmcgVGl0bGU6IF9fU2V0IHVwIGEgY3VzdG9tIHJlY29yZGluZyB0aXRsZSBmb3IgeW91ciByZWNvcmRpbmdzLiBVc2UgYSBjb21tYW5kIC9ydGl0bGUgdG8gY29uZmlndXJlIHRoaXMuClRvIHR1cm4gb2ZmIHRoZSBjdXN0b20gdGl0bGUsIHVzZSBgL3J0aXRsZSBGYWxzZSBgX18KCjQuIFJlY29yZGluZyBEdW1iOiBfX1lvdSBjYW4gc2V0IHVwIGZvcndhcmRpbmcgYWxsIHlvdXIgcmVjb3JkaW5ncyB0byBhIGNoYW5uZWwsIHRoaXMgd2lsbCBiZSB1c2VmdWwgc2luY2Ugb3RoZXJ3aXNlIHJlY29yZGluZ3MgYXJlIHNlbnQgdG8gc2F2ZWQgbWVzc2FnZXMgb2Ygc3RyZWFtaW5nIGFjY291bnQuClNldHVwIHVzaW5nIGBSRUNPUkRJTkdfRFVNUGAgY29uZmlnLl9fCgrimqDvuI8gSWYgeW91IHN0YXJ0IGEgcmVjb3JkaW5nIHdpdGggdmNwbGF5ZXIsIG1ha2Ugc3VyZSB5b3Ugc3RvcCB0aGUgc2FtZSB3aXRoIHZjcGxheWVyLgoKIiIiCgogICAgQ09OVFJPTF9IRUxQPSIiIgpfX1ZDUGxheWVyIGFsbG93cyB5b3UgdG8gY29udHJvbCB5b3VyIHN0cmVhbXMgZWFzaWx5X18KMS4gU2tpcCBhIHNvbmcuCkNvbW1hbmQ6ICoqL3NraXAqKgpfX1lvdSBjYW4gcGFzcyBhIG51bWJlciBncmVhdGVyIHRoYW4gMiB0byBza2lwIHRoZSBzb25nIGluIHRoYXQgcG9zaXRpb24uX18KCjIuIFBhdXNlIHRoZSBwbGF5ZXIuCkNvbW1hbmQ6ICoqL3BhdXNlKioKCjMuIFJlc3VtZSB0aGUgcGxheWVyLgpDb21tYW5kOiAqKi9yZXN1bWUqKgoKNC4gQ2hhbmdlIFZvbHVtZS4KQ29tbWFuZDogKiovdm9sdW1lKioKX19QYXNzIHRoZSB2b2x1bWUgaW4gYmV0d2VlbiAxLTIwMC5fXwoKNS4gTGVhdmUgdGhlIFZDLgpDb21tYW5kOiAqKi9sZWF2ZSoqCgo2LiBTaHVmZmxlIHRoZSBwbGF5bGlzdC4KQ29tbWFuZDogKiovc2h1ZmZsZSoqCgo3LiBDbGVhciB0aGUgY3VycmVudCBwbGF5bGlzdCBxdWV1ZS4KQ29tbWFuZDogKiovY2xlYXJwbGF5bGlzdCoqCgo4LiBTZWVrIHRoZSB2aWRlby4KQ29tbWFuZDogKiovc2VlayoqCl9fWW91IGNhbiBwYXNzIG51bWJlciBvZiBzZWNvbmRzIHRvIGJlIHNraXBwZWQuIEV4YW1wbGU6IC9zZWVrIDEwIHRvIHNraXAgMTAgc2VjLiAvc2VlayAtMTAgdG8gcmV3aW5kIDEwIHNlYy5fXwoKOS4gTXV0ZSB0aGUgcGxheWVyLgpDb21tYW5kOiAqKi92Y211dGUqKgoKMTAuIFVubXV0ZSB0aGUgcGxheWVyLgpDb21tYW5kIDogKiovdmN1bm11dGUqKgoKMTEuIFNob3dzIHRoZSBwbGF5bGlzdC4KQ29tbWFuZDogKiovcGxheWxpc3QqKiAKX19Vc2UgL3BsYXllciB0byBzaG93IHdpdGggY29udHJvbCBidXR0b25zX18KIiIiCgogICAgQURNSU5fSEVMUD0iIiIKX19WQ1BsYXllciBhbGxvd3MgdG8gY29udHJvbCBhZG1pbnMsIHRoYXQgaXMgeW91IGNhbiBhZGQgYWRtaW5zIGFuZCByZW1vdmUgdGhlbSBlYXNpbHkuCkl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSBhIE1vbmdvRGIgZGF0YWJhc2UgZm9yIGJldHRlciBleHBlcmllbmNlLCBlbHNlIGFsbCB5b3UgYWRtaW5zIHdpbGwgZ2V0IHJlc2V0IGFmdGVyIHJlc3RhcnQuX18KCkNvbW1hbmQ6ICoqL3ZjcHJvbW90ZSoqCl9fWW91IGNhbiBwcm9tb3RlIGEgYWRtaW4gd2l0aCB0aGVpciB1c2VybmFtZSBvciB1c2VyIGlkIG9yIGJ5IHJlcGx5aW5nIHRvIHRoYXQgdXNlcnMgbWVzc2FnZS5fXwoKQ29tbWFuZDogKiovdmNkZW1vdGUqKgpfX1JlbW92ZSBhbiBhZG1pbiBmcm9tIGFkbWluIGxpc3RfXwoKQ29tbWFuZDogKiovcmVmcmVzaCoqCl9fUmVmcmVzaCB0aGUgYWRtaW4gbGlzdCBvZiBjaGF0X18KIiIiCgogICAgTUlTQ19IRUxQPSIiIgpDb21tYW5kOiAqKi9leHBvcnQqKgpfX1ZDUGxheWVyIGFsbG93cyB5b3UgdG8gZXhwb3J0IHlvdXIgY3VycmVudCBwbGF5bGlzdCBmb3IgZnV0dXJlIHVzZS5fXwpfX0EganNvbiBmaWxlIHdpbGwgYmUgc2VudCB0byB5b3UgYW5kIHRoZSBzYW1lIGNhbiBiZSB1c2VkIGFsb25nIC9pbXBvcnQgY29tbWFuZC5fXwoKQ29tbWFuZCA6ICoqL2xvZ3MqKgpfX0lmIHlvdXIgcGxheWVyIHdlbnQgc29tZXRoaW5nIGdvbmUgd3JvbmcsIHlvdSBjYW4gZWFzaWx5IGNoZWNrIHRoZSBsb2dzIHVzaW5nIC9sb2dzX18KIApDb21tYW5kIDogKiovZW52KioKX19TZXR1cCB5b3VyIGNvbmZpZyB2YXJzIHdpdGggL2VudiBjb21tYW5kLl9fCl9fRXhhbXBsZTogVG8gc2V0IHVwIGFfXyBgUkVQTFlfTUVTU0FHRWAgX191c2VfXyBgL2VudiBSRVBMWV9NRVNTQUdFPUhleSwgQ2hlY2sgb3V0IEBpUHVyZXggcmF0aGVyIHRoYW4gc3BhbW1pbmcgaW4gbXkgUE1gX18KX19Zb3UgY2FuIGRlbGV0ZSBhIGNvbmZpZyB2YXIgYnkgb21taXRpbmcgYSB2YWx1ZSBmb3IgdGhhdCwgRXhhbXBsZTpfXyBgL2VudiBMT0dfR1JPVVA9YCBfX3RoaXMgd2lsbCBkZWxldGUgdGhlIGV4aXN0aW5nIExPR19HUk9VUCBjb25maWcuCgpDb21tYW5kOiAqKi9jb25maWcqKgpfX1NhbWUgYXMgdXNpbmcgL2VudioqCgpDb21tYW5kOiAqKi91cGRhdGUqKgpfX1VwZGF0ZXMgeW91ZSBib3Qgd2l0aCBsYXRlc3QgY2hhbmdlc19fCgpUaXA6IF9fWW91IGNhbiBlYXNpbHkgY2hhbmdlIHRoZSBDSEFUIGNvbmZpZyBieSBhZGRpbmcgdGhlIHVzZXIgYWNjb3VudCBhbmQgYm90IGFjY291bnQgdG8gYW55IG90aGVyIGdyb3VwIGFuZCBhbnkgY29tbWFuZCBpbiBuZXcgZ3JvdXBfXwoKIiIiCiAgICBFTlZfSEVMUD0iIiIKKipUaGVzZSBhcmUgdGhlIGNvbmZpZ3VyYWJsZSB2YXJzIGF2YWlsYWJsZSBhbmQgeW91IGNhbiBzZXQgZWFjaCBvbmUgb2YgdGhlbSB1c2luZyAvZW52IGNvbW1hbmQqKgoKCioqTWFuZGF0b3J5IFZhcnMqKgoKMS4gYEFQSV9JRGAgOiBfX0dldCBGcm9tIFtteS50ZWxlZ3JhbS5vcmddKGh0dHBzOi8vbXkudGVsZWdyYW0ub3JnLylfXwoKMi4gYEFQSV9IQVNIYCA6IF9fR2V0IGZyb20gW215LnRlbGVncmFtLm9yZ10oaHR0cHM6Ly9teS50ZWxlZ3JhbS5vcmcpX18KCjMuIGBCT1RfVE9LRU5gIDogX19bQEJvdGZhdGhlcl0oaHR0cHM6Ly90ZWxlZ3JhbS5kb2cvQm90RmF0aGVyKV9fCgo0LiBgU0VTU0lPTl9TVFJJTkdgIDogX19HZW5lcmF0ZSBGcm9tIGhlcmUgW0dlbmVyYXRlU3RyaW5nTmFtZV0oaHR0cHM6Ly9yZXBsaXQuY29tL0BNQVpFTk1PSEFNRUQxMy9id3QtbG13c3lxeSlfXwoKNS4gYENIQVRgIDogX19JRCBvZiBDaGFubmVsL0dyb3VwIHdoZXJlIHRoZSBib3QgcGxheXMgTXVzaWMuX18KCjYuIGBTVEFSVFVQX1NUUkVBTWAgOiBfX1RoaXMgd2lsbCBiZSBzdHJlYW1lZCBvbiBzdGFydHVwcyBhbmQgcmVzdGFydHMgb2YgYm90LiAKWW91IGNhbiB1c2UgZWl0aGVyIGFueSBTVFJFQU1fVVJMIG9yIGEgZGlyZWN0IGxpbmsgb2YgYW55IHZpZGVvIG9yIGEgWW91dHViZSBMaXZlIGxpbmsuIApZb3UgY2FuIGFsc28gdXNlIFlvdVR1YmUgUGxheWxpc3QuRmluZCBhIFRlbGVncmFtIExpbmsgZm9yIHlvdXIgcGxheWxpc3QgZnJvbSBbUGxheUxpc3QgRHVtYl0oaHR0cHM6Ly90ZWxlZ3JhbS5kb2cvaVB1cmV4KSBvciBnZXQgYSBQbGF5TGlzdCBmcm9tIFtQbGF5TGlzdCBFeHRyYWN0XShodHRwczovL3RlbGVncmFtLmRvZy9pUHVyZXgpLiAKVGhlIFBsYXlMaXN0IGxpbmsgc2hvdWxkIGluIGZvcm0gYGh0dHBzOi8vdC5tZS9pUHVyZXhgCllvdSBjYW4gYWxzbyB1c2UgdGhlIGZpbGVzIGZyb20gYSBjaGFubmVsIGFzIHN0YXJ0dXAgc3RyZWFtLiBGb3IgdGhhdCBqdXN0IHVzZSB0aGUgY2hhbm5lbCBpZCBvciBjaGFubmVsIHVzZXJuYW1lIG9mIGNoYW5uZWwgYXMgU1RBUlRVUF9TVFJFQU0gdmFsdWUuCkZvciBtb3JlIGluZm8gb24gY2hhbm5lbCBwbGF5ICwgcmVhZCBoZWxwIGZyb20gcGxheWVyIHNlY3Rpb24uX18KCioqUmVjb21tZW5kZWQgT3B0aW9uYWwgVmFycyoqCgoxLiBgREFUQUJBU0VfVVJJYDogX19Nb25nb0RCIGRhdGFiYXNlIFVybCwgZ2V0IGZyb20gW21vbmdvZGJdKGh0dHBzOi8vY2xvdWQubW9uZ29kYi5jb20pLiBUaGlzIGlzIGFuIG9wdGlvbmFsIHZhciwgYnV0IGl0IGlzIHJlY29tb25kZWQgdG8gdXNlIHRoaXMgdG8gZXhwZXJpYW5jZSB0aGUgZnVsbCBmZWF0dXJlcy5fXwoKMi4gYEhFUk9LVV9BUElfS0VZYDogX19Zb3VyIGhlcm9rdSBhcGkga2V5LiBHZXQgb25lIGZyb20gW2hlcmVdKGh0dHBzOi8vZGFzaGJvYXJkLmhlcm9rdS5jb20vYWNjb3VudC9hcHBsaWNhdGlvbnMvYXV0aG9yaXphdGlvbnMvbmV3KV9fCgozLiBgSEVST0tVX0FQUF9OQU1FYDogX19Zb3VyIGhlcm9rdSBhcHAncyBuYW1lLl9fCgo0LiBgRklMVEVSU2A6IF9fRmlsdGVycyBmb3IgY2hhbm5lbCBwbGF5IGZpbGUgc2VhcmNoLiBSZWFkIGhlbHAgYWJvdXQgY3BsYXkgaW4gcGxheWVyIHNlY3Rpb24uX18KCioqT3RoZXIgT3B0aW9uYWwgVmFycyoqCjEuIGBMT0dfR1JPVVBgIDogX19Hcm91cCB0byBzZW5kIFBsYXlsaXN0LCBpZiBDSEFUIGlzIGEgR3JvdXBfXwoKMi4gYEFETUlOU2AgOiBfX0lEIG9mIHVzZXJzIHdobyBjYW4gdXNlIGFkbWluIGNvbW1hbmRzLl9fCgozLiBgUkVQTFlfTUVTU0FHRWAgOiBfX0EgcmVwbHkgdG8gdGhvc2Ugd2hvIG1lc3NhZ2UgdGhlIFVTRVIgYWNjb3VudCBpbiBQTS4gTGVhdmUgaXQgYmxhbmsgaWYgeW91IGRvIG5vdCBuZWVkIHRoaXMgZmVhdHVyZS4gKENvbmZpZ3VyYWJsZSB0aHJvdWdoIGJ1dHRvbnMgaWYgbW9uZ29kYiBhZGRlZC4gVXNlIC9zZXR0aW5ncylfXwoKNC4gYEFETUlOX09OTFlgIDogX19QYXNzIGBUcnVlYCBJZiB5b3Ugd2FudCB0byBtYWtlIC9wbGF5IGNvbW1hbmQgb25seSBmb3IgYWRtaW5zIG9mIGBDSEFUYC4gQnkgZGVmYXVsdCAvcGxheSBpcyBhdmFpbGFibGUgZm9yIGFsbC4oQ29uZmlndXJhYmxlIHRocm91Z2ggYnV0dG9ucyBpZiBtb25nb2RiIGFkZGVkLiBVc2UgL3NldHRpbmdzKV9fCgo1LiBgREFUQUJBU0VfTkFNRWA6IF9fRGF0YWJhc2UgbmFtZSBmb3IgeW91ciBtb25nb2RiIGRhdGFiYXNlLm1vbmdvZGJfXwoKNi4gYFNIVUZGTEVgIDogX19NYWtlIGl0IGBGYWxzZWAgaWYgeW91IGRvbnQgd2FudCB0byBzaHVmZmxlIHBsYXlsaXN0cy4gKENvbmZpZ3VyYWJsZSB0aHJvdWdoIGJ1dHRvbnMpX18KCjcuIGBFRElUX1RJVExFYCA6IF9fTWFrZSBpdCBgRmFsc2VgIGlmIHlvdSBkbyBub3Qgd2FudCB0aGUgYm90IHRvIGVkaXQgdmlkZW8gY2hhdCB0aXRsZSBhY2NvcmRpbmcgdG8gcGxheWluZyBzb25nLiAoQ29uZmlndXJhYmxlIHRocm91Z2ggYnV0dG9ucyBpZiBtb25nb2RiIGFkZGVkLiBVc2UgL3NldHRpbmdzKV9fCgo4LiBgUkVDT1JESU5HX0RVTVBgIDogX19BIENoYW5uZWwgSUQgd2l0aCB0aGUgVVNFUiBhY2NvdW50IGFzIGFkbWluLCB0byBkdW1wIHZpZGVvIGNoYXQgcmVjb3JkaW5ncy5fXwoKOS4gYFJFQ09SRElOR19USVRMRWA6IF9fQSBjdXN0b20gdGl0bGUgZm9yIHlvdXIgdmlkZW9jaGF0IHJlY29yZGluZ3MuX18KCjEwLiBgVElNRV9aT05FYCA6IF9fVGltZSBab25lIG9mIHlvdXIgY291bnRyeSwgYnkgZGVmYXVsdCBJU1RfXwoKMTEuIGBJU19WSURFT19SRUNPUkRgIDogX19NYWtlIGl0IGBGYWxzZWAgaWYgeW91IGRvIG5vdCB3YW50IHRvIHJlY29yZCB2aWRlbywgYW5kIG9ubHkgYXVkaW8gd2lsbCBiZSByZWNvcmRlZC4oQ29uZmlndXJhYmxlIHRocm91Z2ggYnV0dG9ucyBpZiBtb25nb2RiIGFkZGVkLiBVc2UgL3JlY29yZClfXwoKMTIuIGBJU19MT09QYCA7IF9fTWFrZSBpdCBgRmFsc2VgIGlmIHlvdSBkbyBub3Qgd2FudCAyNCAvIDcgVmlkZW8gQ2hhdC4gKENvbmZpZ3VyYWJsZSB0aHJvdWdoIGJ1dHRvbnMgaWYgbW9uZ29kYiBhZGRlZC5Vc2UgL3NldHRpbmdzKV9fCgoxMy4gYElTX1ZJREVPYCA6IF9fTWFrZSBpdCBgRmFsc2VgIGlmIHlvdSB3YW50IHRvIHVzZSB0aGUgcGxheWVyIGFzIGEgbXVzaWNwbGF5ZXIgd2l0aG91dCB2aWRlby4gKENvbmZpZ3VyYWJsZSB0aHJvdWdoIGJ1dHRvbnMgaWYgbW9uZ29kYiBhZGRlZC4gVXNlIC9zZXR0aW5ncylfXwoKMTQuIGBQT1JUUkFJVGA6IF9fTWFrZSBpdCBgVHJ1ZWAgaWYgeW91IHdhbnQgdGhlIHZpZGVvIHJlY29yZGluZyBpbiBwb3J0cmFpdCBtb2RlLiAoQ29uZmlndXJhYmxlIHRocm91Z2ggYnV0dG9ucyBpZiBtb25nb2RiIGFkZGVkLiBVc2UgL3JlY29yZClfXwoKMTUuIGBERUxBWWAgOiBfX0Nob29zZSB0aGUgdGltZSBsaW1pdCBmb3IgY29tbWFuZHMgZGVsZXRpb24uIDEwIHNlYyBieSBkZWZhdWx0Ll9fCgoxNi4gYFFVQUxJVFlgIDogX19DdXN0b21pemUgdGhlIHF1YWxpdHkgb2YgdmlkZW8gY2hhdCwgdXNlIG9uZSBvZiBgaGlnaGAsIGBtZWRpdW1gLCBgbG93YCAuIF9fCgoxNy4gYEJJVFJBVEVgIDogX19CaXRyYXRlIG9mIGF1ZGlvIChOb3QgcmVjb21tZW5kZWQgdG8gY2hhbmdlKS5fXwoKMTguIGBGUFNgIDogX19GcHMgb2YgdmlkZW8gdG8gYmUgcGxheWVkIChOb3QgcmVjb21tZW5kZWQgdG8gY2hhbmdlLilfXwoKIiIiCg=='))